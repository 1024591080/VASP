This example calculates the Raman activity tensor of bulk Si.  
The phonon modes are calculated by a finite difference method [http://theory.cm.utexas.edu/vtsttools/dynmat/] which is implemented through VASP.  
The required code and scripts can be found following the link above.  

The Raman activity tensor is calculated following the completion of the dynamical matrix calculation using the script VASP-raman.py.
VASP-raman.py will setup and execute several VASP calculations where the Macroscopic dielectric tensor will be calculated for each selected phonon mode (real including (excluding) soft modes). 

The remaining post-processing to visualize the Raman active modes is the same as in the CPD example.



Follow the following procedure after successfully completing a Dynamical matrix (DM) VASP calculation (See link above for instructions to do this):

Create a directory which contains the following:

POSCAR  (used in DM VASP run)
OUTCAR  (from DM VASP run, move to OUTCAR.phon after DM post-processing with dymmatrix.py)
INCAR.raman  (should contain LEPSILON=.TRUE. or LCALCEPS=.TRUE. because we want 'MACROSCOPIC STATIC  DIELECTRIC TENSOR' in the OUTCAR)
KPOINTS
POTCAR
makemodes-dymmat.py
VASP-Raman.py      (Older version, first given to me before Github, will be made consistent with new changes. ENV VARIABLE, VASP_RUN must be set)
si_syst.sub  (A submission script that will run VASP_Raman.py through your desired queue sytem)

##Either
aselite.py     (Can be downloaded with the vtstscripts package)
dymmatrix.py    (Can be downloaded with the vtstscripts package)

# Run dymmatrix.py which creates the hessian matrix and gives output files: freq.dat, modes_sqrt_amu.dat which will be used here, others output files are not relevant for this calcualtion.

##Or
include freq.dat and modes_sqrt_amu.dat in your working directory

With the post-processing of the DM VASP calculation complete, 

# Run makemodes-dymmat.py which produces the files "freqs" which is used in the next script. This script assumes only the positive modes will be used and these entry numbers are listed on line 0.
The order of these modes is from smallest to largest wavenumbers

# Submit raman.sub to run VASP-raman.py in the same directory.  This script will submit several VASP jobs on the alloted cores using VASP input files present in the directory

# The remaining steps are the same as in the CPD example


